{"version":3,"sources":["images/JP.logo.tiny.png","images/JacobPetersen_r1_DEN_3082.jpg","components/NavbarSection.js","components/Welcome.js","components/Jake.js","components/About.js","components/Career.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarSection","Navbar","color","dark","NavbarBrand","href","className","src","logo","alt","Nav","navbar","NavItem","NavLink","Welcome","Container","Jake","jake","About","Career","HomePage","App","exact","path","process","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,uD,kVC6B5BC,MAhBb,WAEE,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,MAAI,GACxB,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,WAC9B,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,UAErC,kBAACI,EAAA,EAAD,CAAKC,QAAM,GACT,kBAACC,EAAA,EAAD,CAASN,UAAU,aACjB,kBAACO,EAAA,EAAD,CAASR,KAAK,kBAAkBC,UAAU,yBAA1C,kB,gBCRCQ,MAVf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWT,UAAU,gBACjB,wBAAIA,UAAU,eAAd,WACA,wBAAIA,UAAU,iBAAd,QAAmC,0BAAMA,UAAU,eAAhB,kBAAnC,iB,yBCgBGU,MAnBf,WACE,OACE,kBAACD,EAAA,EAAD,CAAWT,UAAU,aACnB,wBAAIA,UAAU,sBAAd,iBAEA,uBAAGA,UAAU,YACb,yBAAKC,IAAKU,IAAMR,IAAI,gBAAgBH,UAAU,iBAD9C,6d,MCYSY,MAjBf,WACE,OACE,kBAACH,EAAA,EAAD,CAAWT,UAAU,cACnB,wBAAIA,UAAU,uBAAd,YAEA,uBAAGA,UAAU,eACX,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,gBADvC,qV,MCuBSa,MA7Bf,WACE,OACE,kBAACJ,EAAA,EAAD,CAAWT,UAAU,eACnB,wBAAIA,UAAU,sBAAd,UAEA,uBAAGA,UAAU,cAAb,8XAOE,4BACE,2BACE,qCACA,4CACA,gEACA,oDACA,uCACA,+CACA,0CACA,8CCNGc,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCASC,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMC,mBAA8BC,UAAWL,MCG9CM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d614d839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JP.logo.tiny.92fd6daa.png\";","module.exports = __webpack_public_path__ + \"static/media/JacobPetersen_r1_DEN_3082.51507982.jpg\";","import React, {useState} from \"react\";\nimport \"../css/navbar/index.css\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport logo from \"../images/JP.logo.tiny.png\";\n\n  function NavbarSection() {\n\n    return (\n      <Navbar color=\"faded\" dark>\n        <NavbarBrand href=\"/\" className=\"mr-auto\">\n          <img src={logo} alt=\"logo\" className=\"logo\" />\n        </NavbarBrand>\n          <Nav navbar>\n            <NavItem className=\"contactMe\">\n              <NavLink href=\"tel:+9512276991\" className=\"contactMe rainbowText\">CONTACT ME</NavLink>\n            </NavItem>\n          </Nav>\n      </Navbar>\n    );\n}\n\nexport default NavbarSection;\n","import React from 'react';\nimport '../css/welcome/index.css';\nimport {Container, Row, Col} from 'reactstrap';\n\nfunction Welcome() {\n    return (\n        <Container className=\"welcomeBlock\">\n            <h1 className=\"welcomeText\">WELCOME</h1>\n            <h3 className=\"chromaticText\">TO A <span className=\"rainbowText\">MULTICHROMATIC</span> EXPERIENCE</h3>\n        </Container>\n\n    )\n};\n\nexport default Welcome;","import React from \"react\";\nimport { Container, Row, Col, Media } from \"reactstrap\";\nimport \"../css/jake/index.css\";\nimport jake from '../images/JacobPetersen_r1_DEN_3082.jpg';\n\nfunction Jake() {\n  return (\n    <Container className=\"jakeBlock\">\n      <h1 className=\"myName rainbowText\">JAKE PETERSEN</h1>\n      \n      <p className=\"jakeText\">\n      <img src={jake} alt=\"Profile Photo\" className=\"profilePhoto\" />\n        My name is Jake. I'm a full-stack web developer for DA Media, and a\n        front-end web developer for Bluejestic Inc. I enjoy the the creative\n        aspect of coding and creating beautiful user interfaces. With mainly\n        high-line automotive industry and customer service backgrounds, I am\n        looking to move my career focus towards web and app development. I've\n        attended a 24-week, intensive full-stack web development bootcamp, as\n        well as taught myself Swift, Wordpress, and some Python.\n      </p>\n    </Container>\n  );\n}\n\nexport default Jake;\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport \"../css/about/index.css\";\nimport logo from '../images/JP.logo.tiny.png';\n\nfunction About() {\n  return (\n    <Container className=\"aboutBlock\">\n      <h1 className=\"aboutMe rainbowText\">ABOUT ME</h1>\n\n      <p className=\"aboutMeText\">\n        <img src={logo} alt=\"logo\" className=\"aboutMeLogo\" />\n        I currently live in the Denver Metro area. I was born in sunny Southern\n        California. In my spare time, I enjoy working on personal coding\n        projects and going on long-distance runs. I also enjoy visiting the\n        Disney theme parks on both ends of the country whenever I can. Web\n        development is an exciting way for me to express my creativity.\n      </p>\n    </Container>\n  );\n}\n\nexport default About;\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport \"../css/career/index.css\";\n\nfunction Career() {\n  return (\n    <Container className=\"careerBlock\">\n      <h1 className=\"career rainbowText\">CAREER</h1>\n\n      <p className=\"careerText\">\n        Since having my first job back in 2013, I have held many different\n        positions that have given me skills to use in any field. I have been a\n        barista at Starbucks, a shift manager, and a service advisor at\n        Mercedes-Benz. I am ready to pursue a career in full-stack web and app\n        development. I'm currently working as a web developer for Bluejestic Inc\n        and DA Media. I am proficient in:\n        <ul>\n          <b>\n            <li>React</li>\n            <li>HTML5 / CSS3</li>\n            <li>Bootstrap / UI Kit / Materialize</li>\n            <li>Javascript / Node.JS</li>\n            <li>Express</li>\n            <li>MySQL / MongoDB</li>\n            <li>Handlebars</li>\n            <li>Wordpress</li>\n          </b>\n        </ul>\n      </p>\n    </Container>\n  );\n}\n\nexport default Career;\n","import React from \"react\";\nimport NavbarSection from \"./NavbarSection\";\nimport Welcome from \"./Welcome\";\nimport Jake from \"./Jake\";\nimport About from \"./About\";\nimport Career from \"./Career\";\n\nfunction HomePage() {\n  return (\n    <div>\n      <NavbarSection />\n      <Welcome />\n      <Jake />\n      <About />\n      <Career />\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport '../src/css/index.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport HomePage from './components/HomePage';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path={process.env.PUBLIC_URL + \"/\"} component={HomePage} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}